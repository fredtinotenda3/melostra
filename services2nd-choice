"use client";

import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useState, useEffect } from "react";
import {
  Sparkles,
  Droplets,
  Building,
  Leaf,
  CalendarDays,
  Bug,
  CheckCircle2,
  ArrowRight,
  ChevronLeft,
  ChevronRight,
} from "lucide-react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import Image from "next/image";
import Link from "next/link";
import { serviceCategories } from "@/constants";
import PropTypes from "prop-types";

const ErrorFallback = ({ error }) => (
  <div className="p-4 bg-red-50 text-red-700 rounded-lg" role="alert">
    <p className="text-sm font-medium">
      Error loading component: {error.message}
    </p>
  </div>
);

ErrorFallback.propTypes = {
  error: PropTypes.object.isRequired,
};

const categoryIcons = {
  Residential: Sparkles,
  Commercial: Building,
  Specialized: Droplets,
  Environmental: Leaf,
  Event: CalendarDays,
  Pest: Bug,
  Default: CheckCircle2,
};

const GradientText = ({ from, to, children }) => (
  <span
    className={`bg-gradient-to-r ${from} ${to} bg-clip-text text-transparent`}
  >
    {children}
  </span>
);

GradientText.propTypes = {
  from: PropTypes.string.isRequired,
  to: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
};

const ServicePage = () => (
  <div className="min-h-screen flex flex-col">
    <Header />
    <main className="bg-gradient-to-b from-blue-50 to-white flex-1">
      <HeroSection />
      <ServiceCategories />
    </main>
    <Footer />
  </div>
);

const HeroSection = () => {
  const [activeIndex, setActiveIndex] = useState(0);
  const [reducedMotion, setReducedMotion] = useState(false);

  useEffect(() => {
    const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
    setReducedMotion(mediaQuery.matches);

    const handler = (e) => setReducedMotion(e.matches);
    mediaQuery.addEventListener("change", handler);
    return () => mediaQuery.removeEventListener("change", handler);
  }, []);

  useEffect(() => {
    if (reducedMotion) return;
    const interval = setInterval(() => {
      setActiveIndex((prev) => (prev + 1) % serviceCategories.length);
    }, 5000);
    return () => clearInterval(interval);
  }, [reducedMotion]);

  return (
    <section className="relative h-56 w-full overflow-hidden">
      <AnimatePresence mode="wait">
        {serviceCategories.map(
          (category, index) =>
            activeIndex === index && (
              <motion.div
                key={`${category.id}-${activeIndex}`}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: reducedMotion ? 0 : 0.5 }}
                className="absolute inset-0 flex flex-col items-center justify-center px-4 text-center"
                role="region"
                aria-live="polite"
                aria-label={`Service category: ${category.title}`}
              >
                <motion.div
                  initial={{ scale: reducedMotion ? 1 : 0.8 }}
                  animate={{ scale: 1 }}
                  className="mb-4 p-3 bg-white/20 backdrop-blur-sm rounded-xl"
                >
                  <category.icon
                    className="w-12 h-12 text-blue-600 p-2 bg-white rounded-lg shadow-md"
                    aria-hidden="true"
                  />
                </motion.div>

                <h1 className="text-2xl sm:text-3xl font-bold mb-2">
                  <GradientText from="from-blue-600" to="to-green-500">
                    {category.title.split(" ")[0]}
                  </GradientText>
                  <span className="text-gray-900">
                    {" "}
                    {category.title.split(" ").slice(1).join(" ")}
                  </span>
                </h1>

                <p className="text-xs sm:text-sm text-gray-600 max-w-xl mx-auto">
                  {category.description}
                </p>
              </motion.div>
            )
        )}
      </AnimatePresence>

      <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
        {serviceCategories.map((category, index) => (
          <button
            key={category.id}
            onClick={() => setActiveIndex(index)}
            className="h-1.5 w-8 rounded-full overflow-hidden bg-white/20 backdrop-blur-sm"
            aria-label={`Go to service category ${index + 1} of ${
              serviceCategories.length
            }`}
          >
            <motion.div
              animate={{ width: activeIndex === index ? "100%" : "0%" }}
              transition={{ duration: reducedMotion ? 0 : 4.8 }}
              className="h-full bg-blue-600"
            />
          </button>
        ))}
      </div>
    </section>
  );
};

const ServiceCategories = () => (
  <section className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-16">
    {serviceCategories.map((category) => (
      <div key={category.id} className="mb-16 scroll-mt-16" id={category.id}>
        <motion.div
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true, margin: "-100px" }}
          className="flex flex-col items-center gap-3 mb-8 p-4 bg-white rounded-xl shadow-sm"
        >
          <category.icon
            className="w-10 h-10 text-blue-600 p-2 bg-blue-50 rounded-lg"
            aria-hidden="true"
          />
          <div className="text-center">
            <h2 className="text-2xl sm:text-3xl font-bold mb-2">
              <GradientText from="from-blue-600" to="to-green-500">
                {category.title.split(" ")[0]}
              </GradientText>
              <span className="text-gray-800">
                {" "}
                {category.title.split(" ").slice(1).join(" ")}
              </span>
            </h2>
            <p className="text-sm text-gray-600 max-w-2xl mx-auto">
              {category.description}
            </p>
          </div>
        </motion.div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5">
          {category.services.map((service, idx) => (
            <ErrorBoundary key={service.id} FallbackComponent={ErrorFallback}>
              <ServiceCard service={service} index={idx} />
            </ErrorBoundary>
          ))}
        </div>
      </div>
    ))}
  </section>
);

const CarouselIndicators = ({ count, activeIndex, onClick, label }) => (
  <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
    {[...Array(count)].map((_, idx) => (
      <button
        key={idx}
        onClick={() => onClick(idx)}
        className={`w-2 h-2 rounded-full transition-colors ${
          activeIndex === idx ? "bg-white" : "bg-white/50"
        }`}
        aria-label={`${label} ${idx + 1} of ${count}`}
      />
    ))}
  </div>
);

CarouselIndicators.propTypes = {
  count: PropTypes.number.isRequired,
  activeIndex: PropTypes.number.isRequired,
  onClick: PropTypes.func.isRequired,
  label: PropTypes.string.isRequired,
};

const ImageCarousel = ({ images }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isHovered, setIsHovered] = useState(false);
  const [reducedMotion, setReducedMotion] = useState(false);

  useEffect(() => {
    const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
    setReducedMotion(mediaQuery.matches);

    const handler = (e) => setReducedMotion(e.matches);
    mediaQuery.addEventListener("change", handler);
    return () => mediaQuery.removeEventListener("change", handler);
  }, []);

  useEffect(() => {
    if (!images?.length || images.length <= 1 || reducedMotion) return;
    if (isHovered) return;

    const interval = setInterval(() => {
      setCurrentImageIndex((prev) => (prev + 1) % images.length);
    }, 3000);
    return () => clearInterval(interval);
  }, [isHovered, images, reducedMotion]);

  const handleImageChange = (direction) => {
    setCurrentImageIndex((prev) =>
      direction === "next"
        ? (prev + 1) % images.length
        : (prev - 1 + images.length) % images.length
    );
  };

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === "ArrowLeft") handleImageChange("prev");
      if (e.key === "ArrowRight") handleImageChange("next");
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, []);

  if (!images?.length) return null;

  return (
    <div
      className="relative h-52 w-full"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <AnimatePresence mode="wait">
        <motion.div
          key={currentImageIndex}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: reducedMotion ? 0 : 0.3 }}
          className="absolute inset-0"
          drag={images.length > 1 ? "x" : false}
          onDragEnd={(e, { offset }) => {
            if (Math.abs(offset.x) > 50) {
              handleImageChange(offset.x > 0 ? "prev" : "next");
            }
          }}
        >
          <Image
            src={images[currentImageIndex].src}
            alt={images[currentImageIndex].alt}
            fill
            className="object-cover"
            sizes="(max-width: 768px) 100vw, 400px"
            priority={currentImageIndex === 0}
          />
        </motion.div>
      </AnimatePresence>

      {images.length > 1 && (
        <>
          <div className="absolute inset-0 flex items-center justify-between p-2">
            <button
              onClick={() => handleImageChange("prev")}
              className="p-1.5 sm:p-2 bg-white/50 rounded-full backdrop-blur-sm hover:bg-white/80 transition-colors"
              aria-label="Previous image"
            >
              <ChevronLeft className="w-6 h-6 text-gray-900" />
            </button>
            <button
              onClick={() => handleImageChange("next")}
              className="p-1.5 sm:p-2 bg-white/50 rounded-full backdrop-blur-sm hover:bg-white/80 transition-colors"
              aria-label="Next image"
            >
              <ChevronRight className="w-6 h-6 text-gray-900" />
            </button>
          </div>

          <CarouselIndicators
            count={images.length}
            activeIndex={currentImageIndex}
            onClick={setCurrentImageIndex}
            label="Image"
          />
        </>
      )}
    </div>
  );
};

ImageCarousel.propTypes = {
  images: PropTypes.arrayOf(
    PropTypes.shape({
      src: PropTypes.string.isRequired,
      alt: PropTypes.string.isRequired,
    })
  ).isRequired,
};

const PriceBadge = ({ price }) => (
  <span className="text-sm bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
    {price}
  </span>
);

PriceBadge.propTypes = {
  price: PropTypes.string.isRequired,
};

const ServiceCard = ({ service, index }) => {
  const Icon = categoryIcons[service.category] || categoryIcons.Default;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1 }}
      viewport={{ once: true, margin: "-50px" }}
      className="bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-200 overflow-hidden"
    >
      <ImageCarousel images={service.images} />

      <div className="p-5">
        <div className="flex items-center gap-3 mb-3">
          <Icon
            className="w-7 h-7 text-blue-600 flex-shrink-0"
            aria-hidden="true"
          />
          <h3 className="text-lg sm:text-xl font-semibold text-gray-900">
            {service.title}
          </h3>
        </div>

        <div className="flex justify-between items-center mb-4">
          <PriceBadge price={service.price} />
          <span className="text-sm text-gray-500">{service.duration}</span>
        </div>

        <ul className="space-y-2.5 mb-4">
          {service.features.map((feature, idx) => (
            <li
              key={idx}
              className="flex items-start text-gray-600"
              aria-label="Service feature"
            >
              <CheckCircle2
                className="w-4 h-4 text-green-500 mr-2 mt-1 flex-shrink-0"
                aria-hidden="true"
              />
              <span className="text-sm">{feature}</span>
            </li>
          ))}
        </ul>

        <Link
          href="/contact"
          className="w-full flex items-center justify-between px-4 py-2.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm font-medium transition-colors"
          aria-label={`Book ${service.title} service`}
        >
          <span>Book Service</span>
          <ArrowRight className="w-5 h-5" aria-hidden="true" />
        </Link>
      </div>
    </motion.div>
  );
};

ServiceCard.propTypes = {
  service: PropTypes.shape({
    id: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    price: PropTypes.string.isRequired,
    duration: PropTypes.string.isRequired,
    features: PropTypes.arrayOf(PropTypes.string).isRequired,
    images: PropTypes.arrayOf(
      PropTypes.shape({
        src: PropTypes.string.isRequired,
        alt: PropTypes.string.isRequired,
      })
    ).isRequired,
    category: PropTypes.oneOf(Object.keys(categoryIcons)),
  }).isRequired,
  index: PropTypes.number.isRequired,
};

class ErrorBoundary extends React.Component {
  state = { error: null };

  static getDerivedStateFromError(error) {
    return { error };
  }

  componentDidCatch(error, errorInfo) {
    console.error("ServiceCard Error:", error, errorInfo.componentStack);
  }

  render() {
    if (this.state.error) {
      return <this.props.FallbackComponent error={this.state.error} />;
    }
    return this.props.children;
  }
}

ErrorBoundary.propTypes = {
  children: PropTypes.node.isRequired,
  FallbackComponent: PropTypes.elementType.isRequired,
};

export default ServicePage;
